{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","SetText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toUpperCase","showAlert","text1","toLowerCase","text2","split","join","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","length","defaultProps","abouttext","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d3c3e4f5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.abouttext}</a>\r\n              </li> */}\r\n            \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n             <input className=\"form-check-input\"  onClick={props.toggleMode} type=\"checkbox\"id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {title: PropTypes.string,\r\n       abouttext: PropTypes.string\r\n}\r\nNavbar.defaultProps={\r\n    title: 'set title Here',\r\n    abouttext: 'do mention text'\r\n};","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpclick=()=>{\r\n        let newtext=text.toUpperCase();\r\n        SetText(newtext);  \r\n        // console.log(\"up click was pressed\");\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        // console.log(\"on change was pressed\");\r\n      SetText(event.target.value);\r\n    }\r\n    const handledownckick=()=>{\r\n        let text1=text.toLowerCase();\r\n        SetText(text1);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n\r\n        // console.log(\"Down click was pressed\");\r\n    }\r\n    const handlespaceclick=()=>{\r\n        let text2=text.split(/[ ]+/);\r\n        SetText(text2.join(\" \"));\r\n        props.showAlert(\"Extra Spaces are removed!\", \"success\");\r\n\r\n    }\r\n    const oncopy=()=>{\r\n      console.log(\"I am copy\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        text.setSelectionRange(0, 9999);\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n    const onclear=()=>{\r\n      let newText = '';\r\n      SetText(newText);\r\n      props.showAlert(\"Text Was Cleared!\", \"success\");\r\n\r\n    }\r\n    const [text, SetText] = useState('');\r\n    // text=\"new rexr\";//wrong way of entering\r\n    // SetText(\"new text\");//corect way\r\n    return (\r\n      <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleUpclick}>Convert to UpperCase</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handledownckick}>Convert to LowerCase</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handlespaceclick}>Remove Extra Spaces</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={oncopy}>Copy text</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={onclear}>Clear text</button>\r\n      {/* <button className=\"btn btn-primary\">Convert to UpperCase</button> */}\r\n      </div>\r\n      <div className=\"container my-2\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>This Is your Text Summary</h2>\r\n          <p>{text.split(\" \").length} words and {text.length} Characters</p>\r\n          <p>{0.008 * text.split(\" \").length} Minutes Taken To Read</p>   \r\n          <h2>Preview</h2>\r\n          <p>{text.length>0?text:\"Enter Something To Preview Here\"}</p>     \r\n      </div>\r\n      </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n       props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n             <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n                  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nfunction App() {\n  const [mode, setMode] = useState('light'); //its says whether dark mode on OR off\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n       type: type\n    })\nsetTimeout(() => {\n    setAlert(null)\n}, 850);\n  }\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#3a2801';\n      showAlert(\"Dark mode has enabled\" , \"success\");\n      document.title='Text Convertor - Dark Mode';\n\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has enabled\" , \"success\");\n      document.title='Text Convertor - Light Mode';\n    }\n  }\n  return (\n   <>\n<Navbar title=\"TextConvertor\" abouttext=\"About Us\" mode={mode} toggleMode={toggleMode} />\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n<TextForm showAlert={showAlert} heading=\"Enter the text\" mode={mode}/>\n\n</div>\n\n\n\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}